{"ast":null,"code":"var _jsxFileName = \"E:\\\\Convergen\\\\Convergen\\\\client\\\\src\\\\components\\\\checklist\\\\ChecklistItem.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { completeChecklistItem, editChecklistItem, deleteChecklistItem } from '../../actions/board';\nimport { TextField, Button } from '@material-ui/core';\nimport { Checkbox, FormControlLabel } from '@material-ui/core';\nimport EditIcon from '@material-ui/icons/Edit';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport CloseIcon from '@material-ui/icons/Close';\nimport useStyles from '../../utlis/modalStyles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChecklistItem = _ref => {\n  _s();\n\n  let {\n    item,\n    card\n  } = _ref;\n  const classes = useStyles();\n  const [text, setText] = useState(item.text);\n  const [editing, setEditing] = useState(false);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setText(item.text);\n  }, [item.text]);\n\n  const onEdit = async e => {\n    e.preventDefault();\n    dispatch(editChecklistItem(card._id, item._id, {\n      text\n    }));\n    setEditing(false);\n  };\n\n  const onComplete = async e => {\n    dispatch(completeChecklistItem({\n      cardId: card._id,\n      complete: e.target.checked,\n      itemId: item._id\n    }));\n  };\n\n  const onDelete = async e => {\n    dispatch(deleteChecklistItem(card._id, item._id));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.checklistItem,\n    children: editing ? /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => onEdit(e),\n      className: classes.checklistFormLabel,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        variant: \"filled\",\n        fullWidth: true,\n        multiline: true,\n        required: true,\n        autoFocus: true,\n        value: text,\n        onChange: e => setText(e.target.value),\n        onKeyPress: e => e.key === 'Enter' && onEdit(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\",\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            setEditing(false);\n            setText(item.text);\n          },\n          children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n        control: /*#__PURE__*/_jsxDEV(Checkbox, {\n          checked: card.checklist.find(cardItem => cardItem._id === item._id).complete,\n          onChange: onComplete,\n          name: item._id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, this),\n        label: item.text,\n        className: classes.checklistFormLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.itemButtons,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          className: classes.itemButton,\n          onClick: () => setEditing(true),\n          children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"secondary\",\n          className: classes.itemButton,\n          onClick: onDelete,\n          children: /*#__PURE__*/_jsxDEV(HighlightOffIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChecklistItem, \"J2nOcZVrz/ki121NYK/jFZPB6fo=\", false, function () {\n  return [useStyles, useDispatch];\n});\n\n_c = ChecklistItem;\nChecklistItem.propTypes = {\n  item: PropTypes.object.isRequired,\n  card: PropTypes.object.isRequired\n};\nexport default ChecklistItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChecklistItem\");","map":{"version":3,"sources":["E:/Convergen/Convergen/client/src/components/checklist/ChecklistItem.js"],"names":["React","Fragment","useState","useEffect","useDispatch","PropTypes","completeChecklistItem","editChecklistItem","deleteChecklistItem","TextField","Button","Checkbox","FormControlLabel","EditIcon","HighlightOffIcon","CloseIcon","useStyles","ChecklistItem","item","card","classes","text","setText","editing","setEditing","dispatch","onEdit","e","preventDefault","_id","onComplete","cardId","complete","target","checked","itemId","onDelete","checklistItem","checklistFormLabel","value","key","checklist","find","cardItem","itemButtons","itemButton","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  completeChecklistItem,\n  editChecklistItem,\n  deleteChecklistItem,\n} from '../../actions/board';\nimport { TextField, Button } from '@material-ui/core';\nimport { Checkbox, FormControlLabel } from '@material-ui/core';\nimport EditIcon from '@material-ui/icons/Edit';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport CloseIcon from '@material-ui/icons/Close';\nimport useStyles from '../../utlis/modalStyles';\n\nconst ChecklistItem = ({ item, card }) => {\n  const classes = useStyles();\n  const [text, setText] = useState(item.text);\n  const [editing, setEditing] = useState(false);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setText(item.text);\n  }, [item.text]);\n\n  const onEdit = async (e) => {\n    e.preventDefault();\n    dispatch(editChecklistItem(card._id, item._id, { text }));\n    setEditing(false);\n  };\n\n  const onComplete = async (e) => {\n    dispatch(\n      completeChecklistItem({\n        cardId: card._id,\n        complete: e.target.checked,\n        itemId: item._id,\n      })\n    );\n  };\n\n  const onDelete = async (e) => {\n    dispatch(deleteChecklistItem(card._id, item._id));\n  };\n\n  return (\n    <div className={classes.checklistItem}>\n      {editing ? (\n        <form onSubmit={(e) => onEdit(e)} className={classes.checklistFormLabel}>\n          <TextField\n            variant='filled'\n            fullWidth\n            multiline\n            required\n            autoFocus\n            value={text}\n            onChange={(e) => setText(e.target.value)}\n            onKeyPress={(e) => e.key === 'Enter' && onEdit(e)}\n          />\n          <div>\n            <Button type='submit' variant='contained' color='primary'>\n              Save\n            </Button>\n            <Button\n              onClick={() => {\n                setEditing(false);\n                setText(item.text);\n              }}\n            >\n              <CloseIcon />\n            </Button>\n          </div>\n        </form>\n      ) : (\n        <Fragment>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={\n                  card.checklist.find((cardItem) => cardItem._id === item._id).complete\n                }\n                onChange={onComplete}\n                name={item._id}\n              />\n            }\n            label={item.text}\n            className={classes.checklistFormLabel}\n          />\n          <div className={classes.itemButtons}>\n            <Button className={classes.itemButton} onClick={() => setEditing(true)}>\n              <EditIcon />\n            </Button>\n            <Button color='secondary' className={classes.itemButton} onClick={onDelete}>\n              <HighlightOffIcon />\n            </Button>\n          </div>\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nChecklistItem.propTypes = {\n  item: PropTypes.object.isRequired,\n  card: PropTypes.object.isRequired,\n};\n\nexport default ChecklistItem;\n"]},"metadata":{},"sourceType":"module"}