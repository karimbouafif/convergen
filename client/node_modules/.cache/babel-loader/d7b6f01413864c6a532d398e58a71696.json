{"ast":null,"code":"var _jsxFileName = \"E:\\\\Convergen\\\\Convergen\\\\client\\\\src\\\\components\\\\card\\\\Card.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useRef, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { getCard, editCard } from '../../actions/board';\nimport getInitials from '../../utils/getInitials';\nimport CardMUI from '@material-ui/core/Card';\nimport EditIcon from '@material-ui/icons/Edit';\nimport CloseIcon from '@material-ui/icons/Close';\nimport SubjectIcon from '@material-ui/icons/Subject';\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\nimport { TextField, CardContent, Button, Avatar, Tooltip } from '@material-ui/core';\nimport CardModal from './CardModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Card = _ref => {\n  _s();\n\n  let {\n    cardId,\n    list,\n    index\n  } = _ref;\n  const [editing, setEditing] = useState(false);\n  const [openModal, setOpenModal] = useState(false);\n  const [mouseOver, setMouseOver] = useState(false);\n  const [title, setTitle] = useState('');\n  const [height, setHeight] = useState(0);\n  const [completeItems, setCompleteItems] = useState(0);\n  const cardRef = useRef(null);\n  const card = useSelector(state => state.board.board.cardObjects.find(object => object._id === cardId));\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getCard(cardId));\n  }, [cardId, dispatch]);\n  useEffect(() => {\n    if (card) {\n      setTitle(card.title);\n      card.checklist && setCompleteItems(card.checklist.reduce((completed, item) => completed += item.complete ? 1 : 0, 0));\n    }\n  }, [card]);\n  useEffect(() => {\n    cardRef && cardRef.current && setHeight(cardRef.current.clientHeight);\n  }, [list, card, cardRef]);\n\n  const onSubmitEdit = async e => {\n    e.preventDefault();\n    dispatch(editCard(cardId, {\n      title\n    }));\n    setEditing(false);\n    setMouseOver(false);\n  };\n\n  return !card || card && card.archived ? '' : /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CardModal, {\n      cardId: cardId,\n      open: openModal,\n      setOpen: setOpenModal,\n      card: card,\n      list: list\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), !editing ? /*#__PURE__*/_jsxDEV(Draggable, {\n      draggableId: cardId,\n      index: index,\n      children: provided => /*#__PURE__*/_jsxDEV(CardMUI, {\n        className: `card ${mouseOver && !editing ? 'mouse-over' : ''}`,\n        onMouseOver: () => setMouseOver(true),\n        onMouseLeave: () => setMouseOver(false),\n        ref: provided.innerRef,\n        ...provided.draggableProps,\n        ...provided.dragHandleProps,\n        children: [mouseOver && !editing && /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            position: 'absolute',\n            bottom: height - 40,\n            left: '180px',\n            zIndex: 1\n          },\n          onClick: () => setEditing(true),\n          children: /*#__PURE__*/_jsxDEV(EditIcon, {\n            fontSize: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          onClick: () => {\n            setOpenModal(true);\n            setMouseOver(false);\n          },\n          ref: cardRef,\n          children: [card.label && card.label !== 'none' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-label\",\n            style: {\n              backgroundColor: card.label\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: card.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-bottom\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-bottom-left\",\n              children: [card.description && /*#__PURE__*/_jsxDEV(SubjectIcon, {\n                className: \"description-indicator\",\n                fontSize: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 23\n              }, this), card.checklist && card.checklist.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `checklist-indicator ${completeItems === card.checklist.length ? 'completed-checklist-indicator' : ''}`,\n                children: [/*#__PURE__*/_jsxDEV(AssignmentTurnedInIcon, {\n                  fontSize: \"small\",\n                  className: \"checklist-indicator-icon\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 25\n                }, this), completeItems, \"/\", card.checklist.length]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-member-avatars\",\n              children: card.members.map(member => {\n                return /*#__PURE__*/_jsxDEV(Tooltip, {\n                  title: member.name,\n                  children: /*#__PURE__*/_jsxDEV(Avatar, {\n                    className: \"avatar\",\n                    children: getInitials(member.name)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 128,\n                    columnNumber: 27\n                  }, this)\n                }, member.user, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 25\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"create-card-form\",\n      onSubmit: e => onSubmitEdit(e),\n      children: [/*#__PURE__*/_jsxDEV(CardMUI, {\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          className: \"card-edit-content\",\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            margin: \"normal\",\n            fullWidth: true,\n            multiline: true,\n            required: true,\n            label: \"Edit this card's title\",\n            autoFocus: true,\n            value: title,\n            onChange: e => setTitle(e.target.value),\n            onKeyPress: e => e.key === 'Enter' && onSubmitEdit(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-actions\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\",\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            setEditing(false);\n            setMouseOver(false);\n            setTitle(card.title);\n          },\n          children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Card, \"53HjQD2x0aGA56Nn1oQCQsAcB7g=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Card;\nCard.propTypes = {\n  cardId: PropTypes.string.isRequired,\n  list: PropTypes.object.isRequired,\n  index: PropTypes.number.isRequired\n};\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["E:/Convergen/Convergen/client/src/components/card/Card.js"],"names":["React","Fragment","useRef","useState","useEffect","useSelector","useDispatch","PropTypes","Draggable","getCard","editCard","getInitials","CardMUI","EditIcon","CloseIcon","SubjectIcon","AssignmentTurnedInIcon","TextField","CardContent","Button","Avatar","Tooltip","CardModal","Card","cardId","list","index","editing","setEditing","openModal","setOpenModal","mouseOver","setMouseOver","title","setTitle","height","setHeight","completeItems","setCompleteItems","cardRef","card","state","board","cardObjects","find","object","_id","dispatch","checklist","reduce","completed","item","complete","current","clientHeight","onSubmitEdit","e","preventDefault","archived","provided","innerRef","draggableProps","dragHandleProps","position","bottom","left","zIndex","label","backgroundColor","description","length","members","map","member","name","user","target","value","key","propTypes","string","isRequired","number"],"mappings":"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","sourcesContent":["import React, { Fragment, useRef, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { getCard, editCard } from '../../actions/board';\nimport getInitials from '../../utils/getInitials';\n\nimport CardMUI from '@material-ui/core/Card';\nimport EditIcon from '@material-ui/icons/Edit';\nimport CloseIcon from '@material-ui/icons/Close';\nimport SubjectIcon from '@material-ui/icons/Subject';\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\nimport { TextField, CardContent, Button, Avatar, Tooltip } from '@material-ui/core';\nimport CardModal from './CardModal';\n\nconst Card = ({ cardId, list, index }) => {\n  const [editing, setEditing] = useState(false);\n  const [openModal, setOpenModal] = useState(false);\n  const [mouseOver, setMouseOver] = useState(false);\n  const [title, setTitle] = useState('');\n  const [height, setHeight] = useState(0);\n  const [completeItems, setCompleteItems] = useState(0);\n  const cardRef = useRef(null);\n  const card = useSelector((state) =>\n    state.board.board.cardObjects.find((object) => object._id === cardId)\n  );\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getCard(cardId));\n  }, [cardId, dispatch]);\n\n  useEffect(() => {\n    if (card) {\n      setTitle(card.title);\n      card.checklist &&\n        setCompleteItems(\n          card.checklist.reduce(\n            (completed, item) => (completed += item.complete ? 1 : 0),\n            0\n          )\n        );\n    }\n  }, [card]);\n\n  useEffect(() => {\n    cardRef && cardRef.current && setHeight(cardRef.current.clientHeight);\n  }, [list, card, cardRef]);\n\n  const onSubmitEdit = async (e) => {\n    e.preventDefault();\n    dispatch(editCard(cardId, { title }));\n    setEditing(false);\n    setMouseOver(false);\n  };\n\n  return !card || (card && card.archived) ? (\n    ''\n  ) : (\n    <Fragment>\n      <CardModal\n        cardId={cardId}\n        open={openModal}\n        setOpen={setOpenModal}\n        card={card}\n        list={list}\n      />\n      {!editing ? (\n        <Draggable draggableId={cardId} index={index}>\n          {(provided) => (\n            <CardMUI\n              className={`card ${mouseOver && !editing ? 'mouse-over' : ''}`}\n              onMouseOver={() => setMouseOver(true)}\n              onMouseLeave={() => setMouseOver(false)}\n              ref={provided.innerRef}\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n            >\n              {mouseOver && !editing && (\n                <Button\n                  style={{\n                    position: 'absolute',\n                    bottom: height - 40,\n                    left: '180px',\n                    zIndex: 1,\n                  }}\n                  onClick={() => setEditing(true)}\n                >\n                  <EditIcon fontSize='small' />\n                </Button>\n              )}\n              <CardContent\n                onClick={() => {\n                  setOpenModal(true);\n                  setMouseOver(false);\n                }}\n                ref={cardRef}\n              >\n                {card.label && card.label !== 'none' && (\n                  <div className='card-label' style={{ backgroundColor: card.label }} />\n                )}\n                <p>{card.title}</p>\n                <div className='card-bottom'>\n                  <div className='card-bottom-left'>\n                    {card.description && (\n                      <SubjectIcon className='description-indicator' fontSize='small' />\n                    )}\n                    {card.checklist && card.checklist.length > 0 && (\n                      <div\n                        className={`checklist-indicator ${\n                          completeItems === card.checklist.length\n                            ? 'completed-checklist-indicator'\n                            : ''\n                        }`}\n                      >\n                        <AssignmentTurnedInIcon\n                          fontSize='small'\n                          className='checklist-indicator-icon'\n                        />\n                        {completeItems}/{card.checklist.length}\n                      </div>\n                    )}\n                  </div>\n                  <div className='card-member-avatars'>\n                    {card.members.map((member) => {\n                      return (\n                        <Tooltip title={member.name} key={member.user}>\n                          <Avatar className='avatar'>{getInitials(member.name)}</Avatar>\n                        </Tooltip>\n                      );\n                    })}\n                  </div>\n                </div>\n              </CardContent>\n            </CardMUI>\n          )}\n        </Draggable>\n      ) : (\n        <form className='create-card-form' onSubmit={(e) => onSubmitEdit(e)}>\n          <CardMUI>\n            <CardContent className='card-edit-content'>\n              <TextField\n                margin='normal'\n                fullWidth\n                multiline\n                required\n                label=\"Edit this card's title\"\n                autoFocus\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && onSubmitEdit(e)}\n              />\n            </CardContent>\n          </CardMUI>\n          <div className='card-actions'>\n            <Button type='submit' variant='contained' color='primary'>\n              Save\n            </Button>\n            <Button\n              onClick={() => {\n                setEditing(false);\n                setMouseOver(false);\n                setTitle(card.title);\n              }}\n            >\n              <CloseIcon />\n            </Button>\n          </div>\n        </form>\n      )}\n    </Fragment>\n  );\n};\n\nCard.propTypes = {\n  cardId: PropTypes.string.isRequired,\n  list: PropTypes.object.isRequired,\n  index: PropTypes.number.isRequired,\n};\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}