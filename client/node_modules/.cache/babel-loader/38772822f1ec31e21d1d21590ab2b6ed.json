{"ast":null,"code":"var _jsxFileName = \"E:\\\\Convergen\\\\Convergen\\\\client\\\\src\\\\components\\\\list\\\\List.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Draggable, Droppable } from 'react-beautiful-dnd';\nimport { getList } from '../../actions/board';\nimport ListTitle from './ListTitle';\nimport ListMenu from './ListMenu';\nimport Card from '../card/Card';\nimport CreateCardForm from './CreateCardForm';\nimport Button from '@material-ui/core/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst List = _ref => {\n  _s();\n\n  let {\n    listId,\n    index\n  } = _ref;\n  const [addingCard, setAddingCard] = useState(false);\n  const list = useSelector(state => state.board.board.listObjects.find(object => object._id === listId));\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getList(listId));\n  }, [dispatch, listId]);\n  const createCardFormRef = useRef(null);\n  useEffect(() => {\n    addingCard && createCardFormRef.current.scrollIntoView();\n  }, [addingCard]);\n  return !list || list && list.archived ? '' : /*#__PURE__*/_jsxDEV(Draggable, {\n    draggableId: listId,\n    index: index,\n    children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-wrapper\",\n      ...provided.draggableProps,\n      ...provided.dragHandleProps,\n      ref: provided.innerRef,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-top\",\n        children: [/*#__PURE__*/_jsxDEV(ListTitle, {\n          list: list\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ListMenu, {\n          listId: listId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: listId,\n        type: \"card\",\n        children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `list ${addingCard ? 'adding-card' : 'not-adding-card'}`,\n          ...provided.droppableProps,\n          ref: provided.innerRef,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cards\",\n            children: list.cards.map((cardId, index) => /*#__PURE__*/_jsxDEV(Card, {\n              cardId: cardId,\n              list: list,\n              index: index\n            }, cardId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this), provided.placeholder, addingCard && /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: createCardFormRef,\n            children: /*#__PURE__*/_jsxDEV(CreateCardForm, {\n              listId: listId,\n              setAdding: setAddingCard\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), !addingCard && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"create-card-button\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => setAddingCard(true),\n          children: \"+ Add a card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(List, \"3mfdhl0CO+k3/vTmmSkaTeBgl6g=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = List;\nList.propTypes = {\n  listId: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired\n};\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["E:/Convergen/Convergen/client/src/components/list/List.js"],"names":["React","useRef","useState","useEffect","useSelector","useDispatch","PropTypes","Draggable","Droppable","getList","ListTitle","ListMenu","Card","CreateCardForm","Button","List","listId","index","addingCard","setAddingCard","list","state","board","listObjects","find","object","_id","dispatch","createCardFormRef","current","scrollIntoView","archived","provided","draggableProps","dragHandleProps","innerRef","droppableProps","cards","map","cardId","placeholder","propTypes","string","isRequired","number"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Draggable, Droppable } from 'react-beautiful-dnd';\nimport { getList } from '../../actions/board';\nimport ListTitle from './ListTitle';\nimport ListMenu from './ListMenu';\nimport Card from '../card/Card';\nimport CreateCardForm from './CreateCardForm';\nimport Button from '@material-ui/core/Button';\n\nconst List = ({ listId, index }) => {\n  const [addingCard, setAddingCard] = useState(false);\n  const list = useSelector((state) =>\n    state.board.board.listObjects.find((object) => object._id === listId)\n  );\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getList(listId));\n  }, [dispatch, listId]);\n\n  const createCardFormRef = useRef(null);\n  useEffect(() => {\n    addingCard && createCardFormRef.current.scrollIntoView();\n  }, [addingCard]);\n\n  return !list || (list && list.archived) ? (\n    ''\n  ) : (\n    <Draggable draggableId={listId} index={index}>\n      {(provided) => (\n        <div\n          className='list-wrapper'\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          ref={provided.innerRef}\n        >\n          <div className='list-top'>\n            <ListTitle list={list} />\n            <ListMenu listId={listId} />\n          </div>\n          <Droppable droppableId={listId} type='card'>\n            {(provided) => (\n              <div\n                className={`list ${addingCard ? 'adding-card' : 'not-adding-card'}`}\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n              >\n                <div className='cards'>\n                  {list.cards.map((cardId, index) => (\n                    <Card key={cardId} cardId={cardId} list={list} index={index} />\n                  ))}\n                </div>\n                {provided.placeholder}\n                {addingCard && (\n                  <div ref={createCardFormRef}>\n                    <CreateCardForm listId={listId} setAdding={setAddingCard} />\n                  </div>\n                )}\n              </div>\n            )}\n          </Droppable>\n          {!addingCard && (\n            <div className='create-card-button'>\n              <Button variant='contained' onClick={() => setAddingCard(true)}>\n                + Add a card\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n    </Draggable>\n  );\n};\n\nList.propTypes = {\n  listId: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n};\n\nexport default List;\n"]},"metadata":{},"sourceType":"module"}