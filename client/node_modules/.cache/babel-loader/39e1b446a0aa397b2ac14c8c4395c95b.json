{"ast":null,"code":"var _jsxFileName = \"E:\\\\Convergen\\\\Convergen\\\\client\\\\src\\\\components\\\\card\\\\MoveCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { moveCard } from '../../actions/board';\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport useStyles from '../../utils/modalStyles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MoveCard = _ref => {\n  _s();\n\n  let {\n    cardId,\n    setOpen,\n    thisList\n  } = _ref;\n  const classes = useStyles();\n  const [listObject, setListObject] = useState(null);\n  const [listTitle, setListTitle] = useState('');\n  const [position, setPosition] = useState(0);\n  const [positions, setPositions] = useState([0]);\n  const lists = useSelector(state => state.board.board.lists);\n  const listObjects = useSelector(state => state.board.board.listObjects.sort((a, b) => lists.findIndex(id => id === a._id) - lists.findIndex(id => id === b._id)).filter(list => !list.archived));\n  const cardObjects = useSelector(state => state.board.board.cardObjects);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setListObject(thisList);\n    setListTitle(thisList.title);\n  }, [thisList, cardId]);\n  useEffect(() => {\n    if (listObject) {\n      const unarchivedListCards = listObject.cards.map((id, index) => {\n        const card = cardObjects.find(object => object._id === id);\n        const position = index;\n        return {\n          card,\n          position\n        };\n      }).filter(card => !card.card.archived);\n      let cardPositions = unarchivedListCards.map(card => card.position);\n\n      if (listObject !== thisList) {\n        cardPositions = cardPositions.concat(listObject.cards.length);\n      }\n\n      if (listObject.cards.length > 0) {\n        setPositions(cardPositions);\n        setPosition(thisList.cards.findIndex(id => id === cardId));\n      } else {\n        setPositions([0]);\n        setPosition(0);\n      }\n    }\n  }, [thisList, cardId, listObject, cardObjects]);\n\n  const onSubmit = async () => {\n    dispatch(moveCard(cardId, {\n      fromId: thisList._id,\n      toId: listObject._id,\n      toIndex: position\n    }));\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.moveCard,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: classes.moveCardTitle,\n      children: \"Move this card\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        className: classes.moveCardSelect,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          shrink: true,\n          children: \"List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          value: listTitle,\n          required: true,\n          onChange: e => {\n            setListTitle(e.target.value);\n            setListObject(listObjects.find(list => list.title === e.target.value));\n          },\n          displayEmpty: true,\n          children: listObjects.map(list => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: list.title,\n            children: list.title\n          }, list._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        className: classes.moveCardSelect,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          shrink: true,\n          children: \"Position\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          value: position,\n          required: true,\n          onChange: e => setPosition(e.target.value),\n          displayEmpty: true,\n          children: positions.map((position, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: position,\n            children: index + 1\n          }, position, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: classes.button,\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: onSubmit,\n      children: \"Move Card\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MoveCard, \"r6ViqGIIt3kza72LjozHLnzJIA0=\", false, function () {\n  return [useStyles, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = MoveCard;\nMoveCard.propTypes = {\n  cardId: PropTypes.string.isRequired,\n  setOpen: PropTypes.func.isRequired,\n  thisList: PropTypes.object.isRequired\n};\nexport default MoveCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoveCard\");","map":{"version":3,"sources":["E:/Convergen/Convergen/client/src/components/card/MoveCard.js"],"names":["React","useState","useEffect","useSelector","useDispatch","PropTypes","moveCard","Button","InputLabel","MenuItem","FormControl","Select","useStyles","MoveCard","cardId","setOpen","thisList","classes","listObject","setListObject","listTitle","setListTitle","position","setPosition","positions","setPositions","lists","state","board","listObjects","sort","a","b","findIndex","id","_id","filter","list","archived","cardObjects","dispatch","title","unarchivedListCards","cards","map","index","card","find","object","cardPositions","concat","length","onSubmit","fromId","toId","toIndex","moveCardTitle","moveCardSelect","e","target","value","button","propTypes","string","isRequired","func"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { moveCard } from '../../actions/board';\n\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport useStyles from '../../utils/modalStyles';\n\nconst MoveCard = ({ cardId, setOpen, thisList }) => {\n  const classes = useStyles();\n  const [listObject, setListObject] = useState(null);\n  const [listTitle, setListTitle] = useState('');\n  const [position, setPosition] = useState(0);\n  const [positions, setPositions] = useState([0]);\n  const lists = useSelector((state) => state.board.board.lists);\n  const listObjects = useSelector((state) =>\n    state.board.board.listObjects\n      .sort(\n        (a, b) =>\n          lists.findIndex((id) => id === a._id) - lists.findIndex((id) => id === b._id)\n      )\n      .filter((list) => !list.archived)\n  );\n  const cardObjects = useSelector((state) => state.board.board.cardObjects);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setListObject(thisList);\n    setListTitle(thisList.title);\n  }, [thisList, cardId]);\n\n  useEffect(() => {\n    if (listObject) {\n      const unarchivedListCards = listObject.cards\n        .map((id, index) => {\n          const card = cardObjects.find((object) => object._id === id);\n          const position = index;\n          return { card, position };\n        })\n        .filter((card) => !card.card.archived);\n      let cardPositions = unarchivedListCards.map((card) => card.position);\n      if (listObject !== thisList) {\n        cardPositions = cardPositions.concat(listObject.cards.length);\n      }\n      if (listObject.cards.length > 0) {\n        setPositions(cardPositions);\n        setPosition(thisList.cards.findIndex((id) => id === cardId));\n      } else {\n        setPositions([0]);\n        setPosition(0);\n      }\n    }\n  }, [thisList, cardId, listObject, cardObjects]);\n\n  const onSubmit = async () => {\n    dispatch(\n      moveCard(cardId, { fromId: thisList._id, toId: listObject._id, toIndex: position })\n    );\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.moveCard}>\n      <h3 className={classes.moveCardTitle}>Move this card</h3>\n      <div>\n        <FormControl className={classes.moveCardSelect}>\n          <InputLabel shrink>List</InputLabel>\n          <Select\n            value={listTitle}\n            required\n            onChange={(e) => {\n              setListTitle(e.target.value);\n              setListObject(listObjects.find((list) => list.title === e.target.value));\n            }}\n            displayEmpty\n          >\n            {listObjects.map((list) => (\n              <MenuItem key={list._id} value={list.title}>\n                {list.title}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n        <FormControl className={classes.moveCardSelect}>\n          <InputLabel shrink>Position</InputLabel>\n          <Select\n            value={position}\n            required\n            onChange={(e) => setPosition(e.target.value)}\n            displayEmpty\n          >\n            {positions.map((position, index) => (\n              <MenuItem key={position} value={position}>\n                {index + 1}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </div>\n      <Button\n        className={classes.button}\n        variant='contained'\n        color='primary'\n        onClick={onSubmit}\n      >\n        Move Card\n      </Button>\n    </div>\n  );\n};\n\nMoveCard.propTypes = {\n  cardId: PropTypes.string.isRequired,\n  setOpen: PropTypes.func.isRequired,\n  thisList: PropTypes.object.isRequired,\n};\n\nexport default MoveCard;\n"]},"metadata":{},"sourceType":"module"}