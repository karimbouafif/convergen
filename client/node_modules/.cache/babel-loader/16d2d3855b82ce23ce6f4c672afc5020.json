{"ast":null,"code":"var _jsxFileName = \"E:\\\\Convergen\\\\Convergen\\\\client\\\\src\\\\components\\\\card\\\\CardModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { GithubPicker } from 'react-color';\nimport { editCard, archiveCard } from '../../actions/board';\nimport { Modal, TextField, Button } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport MoveCard from './MoveCard';\nimport DeleteCard from './DeleteCard';\nimport CardMembers from './CardMembers';\nimport Checklist from '../checklist/Checklist';\nimport useStyles from '../../utlis/modalStyles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CardModal = _ref => {\n  _s();\n\n  let {\n    cardId,\n    open,\n    setOpen,\n    card,\n    list\n  } = _ref;\n  const classes = useStyles();\n  const [title, setTitle] = useState(card.title);\n  const [description, setDescription] = useState(card.description);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setTitle(card.title);\n    setDescription(card.description);\n  }, [card]);\n\n  const onTitleDescriptionSubmit = async e => {\n    e.preventDefault();\n    dispatch(editCard(cardId, {\n      title,\n      description\n    }));\n  };\n\n  const onArchiveCard = async () => {\n    dispatch(archiveCard(cardId, true));\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    open: open,\n    onClose: () => setOpen(false),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${classes.paper} ${classes.cardModal}`,\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => onTitleDescriptionSubmit(e),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.modalTop,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            variant: \"outlined\",\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            multiline: true,\n            label: \"Card title\",\n            value: title,\n            onChange: e => setTitle(e.target.value),\n            onKeyPress: e => e.key === 'Enter' && onTitleDescriptionSubmit(e),\n            className: classes.cardTitle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => setOpen(false),\n            children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"outlined\",\n          margin: \"normal\",\n          fullWidth: true,\n          multiline: true,\n          label: \"Card description\",\n          value: description,\n          onChange: e => setDescription(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\",\n          disabled: title === card.title && (description === card.description || description === '' && !card.description),\n          className: classes.button,\n          children: \"Save All Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.modalSection,\n        children: [/*#__PURE__*/_jsxDEV(CardMembers, {\n          card: card\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: classes.labelTitle,\n            children: \"Label\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(GithubPicker, {\n            className: classes.colorPicker,\n            onChange: async color => dispatch(editCard(cardId, {\n              label: color.hex\n            }))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: classes.noLabel,\n            variant: \"outlined\",\n            onClick: async () => dispatch(editCard(cardId, {\n              label: 'none'\n            })),\n            children: \"No Label\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Checklist, {\n        card: card\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.modalSection,\n        children: [/*#__PURE__*/_jsxDEV(MoveCard, {\n          cardId: cardId,\n          setOpen: setOpen,\n          thisList: list\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.modalBottomRight,\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            className: classes.archiveButton,\n            onClick: onArchiveCard,\n            children: \"Archive Card\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DeleteCard, {\n            cardId: cardId,\n            setOpen: setOpen,\n            list: list\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CardModal, \"jamoN8G1HfLtvc+vjLKQ6SGDMSc=\", false, function () {\n  return [useStyles, useDispatch];\n});\n\n_c = CardModal;\nCardModal.propTypes = {\n  cardId: PropTypes.string.isRequired,\n  open: PropTypes.bool.isRequired,\n  setOpen: PropTypes.func.isRequired,\n  card: PropTypes.object.isRequired,\n  list: PropTypes.object.isRequired\n};\nexport default CardModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardModal\");","map":{"version":3,"sources":["E:/Convergen/Convergen/client/src/components/card/CardModal.js"],"names":["React","useState","useEffect","useDispatch","PropTypes","GithubPicker","editCard","archiveCard","Modal","TextField","Button","CloseIcon","MoveCard","DeleteCard","CardMembers","Checklist","useStyles","CardModal","cardId","open","setOpen","card","list","classes","title","setTitle","description","setDescription","dispatch","onTitleDescriptionSubmit","e","preventDefault","onArchiveCard","paper","cardModal","modalTop","target","value","key","cardTitle","button","modalSection","labelTitle","colorPicker","color","label","hex","noLabel","modalBottomRight","archiveButton","propTypes","string","isRequired","bool","func","object"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { GithubPicker } from 'react-color';\nimport { editCard, archiveCard } from '../../actions/board';\nimport { Modal, TextField, Button } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport MoveCard from './MoveCard';\nimport DeleteCard from './DeleteCard';\nimport CardMembers from './CardMembers';\nimport Checklist from '../checklist/Checklist';\nimport useStyles from '../../utlis/modalStyles';\n\nconst CardModal = ({ cardId, open, setOpen, card, list }) => {\n  const classes = useStyles();\n  const [title, setTitle] = useState(card.title);\n  const [description, setDescription] = useState(card.description);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setTitle(card.title);\n    setDescription(card.description);\n  }, [card]);\n\n  const onTitleDescriptionSubmit = async (e) => {\n    e.preventDefault();\n    dispatch(editCard(cardId, { title, description }));\n  };\n\n  const onArchiveCard = async () => {\n    dispatch(archiveCard(cardId, true));\n    setOpen(false);\n  };\n\n  return (\n    <Modal open={open} onClose={() => setOpen(false)}>\n      <div className={`${classes.paper} ${classes.cardModal}`}>\n        <form onSubmit={(e) => onTitleDescriptionSubmit(e)}>\n          <div className={classes.modalTop}>\n            <TextField\n              variant='outlined'\n              margin='normal'\n              required\n              fullWidth\n              multiline\n              label='Card title'\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              onKeyPress={(e) => e.key === 'Enter' && onTitleDescriptionSubmit(e)}\n              className={classes.cardTitle}\n            />\n            <Button onClick={() => setOpen(false)}>\n              <CloseIcon />\n            </Button>\n          </div>\n          <TextField\n            variant='outlined'\n            margin='normal'\n            fullWidth\n            multiline\n            label='Card description'\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n          />\n          <Button\n            type='submit'\n            variant='contained'\n            color='primary'\n            disabled={\n              title === card.title &&\n              (description === card.description ||\n                (description === '' && !card.description))\n            }\n            className={classes.button}\n          >\n            Save All Changes\n          </Button>\n        </form>\n        <div className={classes.modalSection}>\n          <CardMembers card={card} />\n          <div>\n            <h3 className={classes.labelTitle}>Label</h3>\n            <GithubPicker\n              className={classes.colorPicker}\n              onChange={async (color) => dispatch(editCard(cardId, { label: color.hex }))}\n            />\n            <Button\n              className={classes.noLabel}\n              variant='outlined'\n              onClick={async () => dispatch(editCard(cardId, { label: 'none' }))}\n            >\n              No Label\n            </Button>\n          </div>\n        </div>\n        <Checklist card={card} />\n        <div className={classes.modalSection}>\n          <MoveCard cardId={cardId} setOpen={setOpen} thisList={list} />\n          <div className={classes.modalBottomRight}>\n            <Button\n              variant='contained'\n              className={classes.archiveButton}\n              onClick={onArchiveCard}\n            >\n              Archive Card\n            </Button>\n            <DeleteCard cardId={cardId} setOpen={setOpen} list={list} />\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nCardModal.propTypes = {\n  cardId: PropTypes.string.isRequired,\n  open: PropTypes.bool.isRequired,\n  setOpen: PropTypes.func.isRequired,\n  card: PropTypes.object.isRequired,\n  list: PropTypes.object.isRequired,\n};\n\nexport default CardModal;\n"]},"metadata":{},"sourceType":"module"}